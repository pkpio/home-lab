version: '3'
services:
  #======================= Home Assistant =====================#
  # Hosts home-assistant instance
  #============================================================#
  home-assistant:
    container_name: home-assistant
    image: homeassistant/home-assistant:stable
    restart: always
    ports:
      - "8123:8123"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./home-assistant/config/:/config
    depends_on:
      - mariadb


  #========================== Database ========================#
  # MariaDB database for home assistant
  #============================================================#
  mariadb:
    container_name: mariadb
    image: mariadb:latest
    restart: always
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./mariadb/data:/var/lib/mysql
    ports:
      - "3306:3306"
    env_file:
      - mariadb/.env


  #====================== Zigbee dongle =======================#
  # Runs deconz to support conbee ii usb zigbee dongle
  #============================================================#
  deconz:
    container_name: deconz
    image: deconzcommunity/deconz:latest
    restart: always
    ports:
      - "8080:8080"
      - "8443:8443"
      - "5900:5900"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./deconz/config:/opt/deCONZ
    devices:
      - /dev/ttyACM0
    env_file:
      - deconz/.env


  #====================== Media server ========================#
  # Runs Plex media server in docker. TODO: Setup to use 
  # graphic card for hardware accelarated transcoding.
  #============================================================#
  plex-media-server:
    container_name: plex-media-server
    image: plexinc/pms-docker:latest
    restart: unless-stopped
    ports:
      - "32400:32400"
      - "1900:1900/udp"
      - "3005:3005"
      - "5353:5353/udp"
      - "8324:8324"
      - "32410:32410/udp"
      - "32412:32412/udp"
      - "32413:32413/udp"
      - "32414:32414/udp"
      - "32469:32469"
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./plex-media-server/config:/config
      - ./plex-media-server/transcode:/transcode
      - /media/external-hd/data:/media/external-hd/data
    env_file:
      - plex-media-server/.env
    devices:
      - /dev/dri:/dev/dri


  #====================== Monitoring ========================#
  # Runs Glances to monitor the resources of the Host
  #============================================================#
  glances:
    container_name: glances
    image: nicolargo/glances:latest
    restart: unless-stopped
    ports:
      - "61208-61209:61208-61209"
    pid: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /media/external-hd:/external-hd:ro
    environment:
      - "GLANCES_OPT=-w"


  #======================== Cron service ======================#
  # Schedules cron jobs on different docker containers or host
  #============================================================#
  cron-service:
    container_name: cron-service
    image: mcuadros/ofelia:latest
    restart: always
    command: daemon --docker
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro


  #=================== Backup & cloud sync ====================#
  # Creates backups and syncs them to a cloud service
  #============================================================#
  cloud-backup:
    container_name: cloud-backup
    image: rclone/rclone:latest
    restart: always
    command: rcd --rc-web-gui --rc-addr :5572
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./cloud-backup/config:/config/rclone
      - ./cloud-backup/script:/script
      - ./cloud-backup/backups:/backups
      - ./:/home-lab:ro
    labels:
      ofelia.enabled: "true"

      # Create an archive at 2 am every day
      ofelia.job-exec.archive-docker-volume.schedule: "0 0 2 * * *" 
      ofelia.job-exec.archive-docker-volume.command: "/bin/sh -c /script/backup.sh"

      # Sync to cloud service at 3 am every day
      ofelia.job-exec.cloud-sync.schedule: "0 0 3 * * *" 
      ofelia.job-exec.cloud-sync.command: "rclone -vv sync /backups cloud:/Home-Assistance-Backups"


  #===================== Torrent client =======================#
  # Runs tranmission torrent client through an OpenVPN tunnel
  #============================================================#
  transmission:
    container_name: transmission
    image: haugene/transmission-openvpn:latest
    restart: unless-stopped
    ports:
      - "9091:9091"
      - "8888:8888"
    cap_add:
      - NET_ADMIN
    dns:
      - 8.8.8.8
      - 8.8.4.4
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./transmission/data:/torrent/data
      - /media/external-hd/data:/external-hd/data
    devices:
      - /dev/net/tun
    env_file:
      - transmission/.env


  #=====================     Sonarr     =======================#
  # To manage TV series
  #============================================================#
  sonarr:
    image: lscr.io/linuxserver/sonarr:latest
    container_name: sonarr
    environment:
      - PUID=0
      - PGID=0
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./sonarr/data:/config
      - ./transmission/data:/torrent/data
      - /media/external-hd/data/tv:/tv
    ports:
      - 8989:8989
    restart: unless-stopped


  #=====================     Radarr     =======================#
  # To manage Movies
  #============================================================#
  radarr:
    image: lscr.io/linuxserver/radarr:latest
    container_name: radarr
    environment:
      - PUID=0
      - PGID=0
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./radarr/data:/config
      - ./transmission/data:/torrent/data
      - /media/external-hd/data/movies:/movies
    ports:
      - 7878:7878
    restart: unless-stopped


  #=====================     Jackett     =======================#
  # To manage torrent indexers
  #============================================================#
  jackett:
    image: lscr.io/linuxserver/jackett:latest
    container_name: jackett
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./jackett/config/:/config
      - ./jackett/downloads:/downloads
    ports:
      - 9117:9117
    restart: unless-stopped


  #=================== Transmission proxy =====================#
  # Proxy to access the torrent client due to internal VPN
  #============================================================#
  transmission-proxy:
    container_name: transmission-proxy
    image: haugene/transmission-openvpn-proxy
    links:
      - transmission
    ports:
      - 8081:8080
    volumes:
      - /etc/localtime:/etc/localtime:ro


  #======================= Wireguard  =========================#
  # VPN server to access services available only locally
  #============================================================#
  wireguard:
    image: lscr.io/linuxserver/wireguard:latest
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./wireguard/config:/config
      - /lib/modules:/lib/modules
    ports:
      - 51820:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    env_file:
      - wireguard/.env
    restart: unless-stopped

